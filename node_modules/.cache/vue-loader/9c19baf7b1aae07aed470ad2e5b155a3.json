{"remainingRequest":"E:\\Vue\\vue进阶\\2\\player\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\Vue\\vue进阶\\2\\player\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Vue\\vue进阶\\2\\player\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Vue\\vue进阶\\2\\player\\src\\views\\07.mv.vue?vue&type=template&id=3c3ed146&","dependencies":[{"path":"E:\\Vue\\vue进阶\\2\\player\\src\\views\\07.mv.vue","mtime":1583228849036},{"path":"E:\\Vue\\vue进阶\\2\\player\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Vue\\vue进阶\\2\\player\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\Vue\\vue进阶\\2\\player\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Vue\\vue进阶\\2\\player\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}